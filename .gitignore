def p_statement_mprl(p):
            """mprl : mprl2 """

        def p_statement_mprl2(p):
            """mprl2 : START metestart blankspace commentmp TURNON meteturnon blankspace commentmp blankspace  programa TURNOFF meteturnoff blankspace commentmp END meteend commentmp
                    | FUNCTION metefuncion blankspace ID meteid blankspace commentmp PARENTESISIZQ meteparizq blankspace parametrosmp PARENTESISDER meteparder blankspace LLAVEIZQ metellaveizq blankspace commentmp programa LLAVEDER metellaveder blankspace commentmp mprl"""

        def p_statement_metestart(p):
            """metestart : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por start")
        def p_statement_meteturnon(p):
            """meteturnon : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por turnon")
        def p_statement_meteturnoff(p):
            """meteturnoff : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por turnoff")
        def p_statement_meteend(p):
            """meteend : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por end")

        def p_statement_metefuncion(p):
            """metefuncion : """
            if contador == 1:
                global ListadeTokens3
                #self.Mete_Start(ListadeTokens3)
                #self.Mete_Turnon(ListadeTokens3)
                #self.Mete_Turnoff(ListadeTokens3)
                #self.Mete_End(ListadeTokens3)
                #self.Mete_Function(ListadeTokens3)
                #self.Mete_Parentesis_Izquierdo(ListadeTokens3)
                #self.Mete_Parentesis_Derecho(ListadeTokens3)
                #self.Mete_Llave_Izquierda(ListadeTokens3)
                #self.Mete_Llave_Derecha(ListadeTokens3)
                print("Voy por la funcion")

        def p_stametement_meteid(p):
            """meteid : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por ID")

        def p_statement_meteparizq(p):
            """meteparizq : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por (")

        def p_statement_meteparder(p):
            """meteparder : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por )")

        def p_statement_metellaveizq(p):
            """metellaveizq : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por {")

        def p_statement_metellaveder(p):
            """metellaveder : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por }")

        def p_statement_commentmp(p):
            """commentmp :
                        | comment"""

        def p_statement_parametrosmp(p):
            """parametrosmp :
                            | parametros"""

        def p_statement_programa(p):
            """ programa : vars bloque
                        | bloque"""

        def p_statement_vars(p):
            """vars : parametros4 PUNTOYCOMA metepuntoycoma blankspace commentvars"""

        def p_statement_metepuntoycoma(p):
            """metepuntoycoma : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por ;")

        def p_statement_varsvarcte(p):
            """varsvarcte :
                        | IGUAL meteigual blankspace varcte"""

        def p_statement_meteigual(p):
            """meteigual : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por =")

        def p_statement_commentvars(p):
            """commentvars :
                        | comment"""

        def p_statement_parametros4(p):
            """parametros4 : parametros5"""

        def p_statement_parametros5(p):
            """parametros5 : tipo blankspace ID meteid blankspace varsvarcte blankspace parametros6"""

        def p_statement_parametros6(p):
            """parametros6 :
                        | COMA metecoma blankspace parametros4"""

        def p_statement_metecoma(p):
            """metecoma : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por la coma ,")

        def p_statement_tipo(p):
            """tipo : INT meteint
                    | FLOAT metefloat
                    | BOOL metebool"""
            
            
        def p_statement_metesint(p):
            """meteint : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por int")

        def p_statement_metefloat(p):
            """metefloat : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por float")
                
        def p_statement_metesbool(p):
            """metebool : """
            if contador == 1:
                global ListadeTokens3
                print("Voy por bool")

        def p_statement_bloque(p):
            """bloque : bloque1"""

        def p_statement_bloque1(p):
            """bloque1 :
                    | ejecucion bloque1
                    | estatuto bloque1"""

        def p_statement_estatuto(p):
            """estatuto : asignacion
                        | condicion"""

        def p_statement_asignacion(p):
            """asignacion : ID meteid blankspace IGUAL meteigual blankspace expresion PUNTOYCOMA metepuntoycoma blankspace commentasig"""

        def p_statement_commentasig(p):
            """commentasig :
                        | comment"""

        def p_statement_expresion(p):
            """expresion : exp expresion1"""

        def p_statement_expresion1(p):
            """expresion1 :
                        | MAYORQUE blankspace exp
                        | MENORQUE blankspace exp
                        | AND blankspace exp
                        | OR blankspace exp
                        | NOT blankspace exp"""

        def p_statement_exp(p):
            """exp : exp1"""

        def p_statement_exp1(p):
            """exp1 : termino exp2"""

        def p_statement_exp2(p):
            """exp2 :
                    | MAS blankspace exp1
                    | MENOS blankspace exp1"""

        def p_statement_termino(p):
            """termino : termino2"""

        def p_statement_termino2(p):
            """termino2 : factor termino3"""

        def p_statement_termino3(p):
            """termino3 :
                    | MULTIPLICA termino2
                    | DIVIDE termino2"""

        def p_statement_factor(p):
            """factor : PARENTESISIZQ expresion PARENTESISDER
                    | varcte blankspace
                    | MAS blankspace varcte blankspace
                    | MENOS blankspace varcte blankspace"""

        def p_statement_varcte(p):
            """varcte :
                    | ID
                    | CTEINT
                    | CTEFLOAT"""

        def p_statement_condicion(p):
            """condicion : IF blankspace PARENTESISIZQ blankspace expresion PARENTESISDER commentcond blankspace LLAVEIZQ blankspace commentcond bloque LLAVEDER blankspace commentcond condic1
                        | WHILE blankspace PARENTESISIZQ blankspace expresion PARENTESISDER commentcond blankspace LLAVEIZQ blankspace commentcond bloque LLAVEDER blankspace commentcond
                        | DO blankspace commentcond LLAVEIZQ blankspace commentcond bloque LLAVEDER blankspace commentcond WHILE blankspace PARENTESISIZQ blankspace expresion PARENTESISDER blankspace commentcond"""

        def p_statement_commentcond(p):
            """commentcond :
                        | comment"""

        def p_statement_condic1(p):
            """condic1 :
                    | ELSE blankspace condic32"""

        def p_statement_condic32(p):
            """condic32 : IF blankspace PARENTESISIZQ blankspace expresion PARENTESISDER commentcond blankspace LLAVEIZQ blankspace commentcond bloque LLAVEDER blankspace commentcond condic1
                        | commentcond LLAVEIZQ blankspace commentcond bloque LLAVEDER blankspace commentcond"""

        def p_statement_parametros(p):
            """parametros : parametros2"""

        def p_statement_parametros2(p):
            """parametros2 : tipo blankspace ID blankspace parametros3"""

        def p_statement_parametros3(p):
            """parametros3 :
                        | COMA blankspace parametros2"""

        def p_statement_ejecucion(p):
            """ejecucion : GO blankspace commentej
                        | STOP blankspace commentej
                        | REVERSE blankspace commentej
                        | TURNRIGHT blankspace commentej
                        | TURNLEFT blankspace commentej
                        | BEEP blankspace commentej
                        | FUNCTION blankspace ID blankspace PARENTESISIZQ blankspace PARENTESISDER blankspace commentej"""

        def p_statement_commentej(p):
            """commentej :
                        | comment"""

        def p_statement_comment(p):
            """comment : GATO comment2"""

        def p_statement_comment2(p):
            """comment2 :
                        | ID comment2"""


        def p_statement_blankspace(p):
            """blankspace :
                        | BLANK quitablank"""

        def p_statement_quitablank(p):
            """quitablank : """
            if contador == 1:
                print("Quita Blank Space")


        def p_error(p):
            if p:
                print("Syntax error at '%s'" % p.value)
            else:
                print("Syntax error at EOF")
